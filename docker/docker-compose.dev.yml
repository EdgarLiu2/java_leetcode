# Docker mirror:
#   https://r3cphckj.mirror.aliyuncs.com
#   https://hub-mirror.c.163.com
#   https://docker.mirrors.ustc.edu.cn

version: '3'
services:
# Tools
  # ubuntu:
    # image: ubuntu:latest
    # hostname: ubuntu
    # domainname: internal
    # restart: always
    # tty: true
# Middleware
  # etcd-1:
    # image: quay.io/coreos/etcd:latest
    # hostname: etcd-1
    # domainname: internal
    # environment:
      # - TZ=CST-8
    # command: etcd -name etcd-1 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster "etcd-1=http://etcd-1:2380,etcd-2=http://etcd-2:2380,etcd-3=http://etcd-3:2380" -initial-cluster-state new
    # ports:
      # - 2379:2379
      # - 2380:2380
    # restart: unless-stopped
    # healthcheck:
      # test: ["CMD", "curl", "-f", "http://localhost:2379"]
      # interval: 30s
      # timeout: 10s
      # retries: 5
  # etcd-2:
    # image: quay.io/coreos/etcd:latest
    # hostname: etcd-2
    # domainname: internal
    # environment:
      # - TZ=CST-8
    # command: etcd -name etcd-2 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster "etcd-1=http://etcd-1:2380,etcd-2=http://etcd-2:2380,etcd-3=http://etcd-3:2380" -initial-cluster-state new
    # ports:
      # - 2379
      # - 2380
    # restart: unless-stopped
    # healthcheck:
      # test: ["CMD", "curl", "-f", "http://localhost:2379"]
      # interval: 30s
      # timeout: 10s
      # retries: 5
  # etcd-3:
    # image: quay.io/coreos/etcd:latest
    # hostname: etcd-3
    # domainname: internal
    # environment:
      # - TZ=CST-8
    # command: etcd -name etcd-3 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380 -initial-cluster-token etcd-cluster -initial-cluster "etcd-1=http://etcd-1:2380,etcd-2=http://etcd-2:2380,etcd-3=http://etcd-3:2380" -initial-cluster-state new
    # ports:
      # - 2379
      # - 2380
    # restart: unless-stopped
    # healthcheck:
      # test: ["CMD", "curl", "-f", "http://localhost:2379"]
      # interval: 30s
      # timeout: 10s
      # retries: 5
  # rabbitmq:
    # image: rabbitmq:3-management
    # hostname: rabbitmq-server
    # domainname: internal
    # environment:
      # - ENV=DEV
      # - RABBITMQ_DEFAULT_USER=admin
      # - RABBITMQ_DEFAULT_PASS=admin
    # ports:
      # - 5672:5672
      # - 15672:15672
    # restart: unless-stopped
    # healthcheck:
      # test: ["CMD", "curl", "-f", "http://localhost:5672"]
      # interval: 30s
      # timeout: 10s
      # retries: 5
  # canal-server:
    # image: canal/canal-server:v1.1.4
    # hostname: canal-server
    # domainname: internal
    # depends_on:
      # - mysql-db
    # environment:
      # - ENV=DEV
      # - canal.instance.master.address=mysql-db:3306
      # - canal.instance.dbUsername=canal
      # - canal.instance.dbPassword=canal
      # - canal.instance.connectionCharset=UTF-8
      # - canal.instance.tsdb.enable=true
      # - canal.instance.gtidon=false
      # - canal.instance.filter.regex=.*\\..* 
    # ports:
      # - 11111:11111
    # restart: unless-stopped
# Storage
  redis-db:
    image: redis:latest
    hostname: redis-db
    domainname: internal
    environment:
      - ENV=DEV
    ports:
      - 6379:6379
    restart: unless-stopped
    healthcheck:
      test: redis-cli -h localhost ping
      interval: 30s
      timeout: 10s
      retries: 5
  mysql-db:
    image: mysql:latest
    hostname: mysql-db
    domainname: internal
    environment:
      - ENV=DEV
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_USER=test
      - MYSQL_PASSWORD=test
    ports:
      - 3306:3306
    restart: unless-stopped
    healthcheck:
      #test: /usr/bin/mysqladmin ping -h localhost --user=test --password=test
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "--user=test", "--password=test"]
      interval: 5s
      timeout: 2s
      retries: 3
    volumes:
      - "D:/workspace/projects/java_leetcode/docker/config/mysql:/etc/mysql"
      - "D:/workspace/projects/java_leetcode/docker/data/mysql/data:/var/lib/mysql"
      - "D:/workspace/projects/java_leetcode/docker/data/mysql/logs:/var/log/mysql"


volumes:
  redis_data: